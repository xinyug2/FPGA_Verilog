
module LFSR(clk, reset, out);

	input logic clk, reset;
	output logic [9:0] out;
	logic linear_feedback;
	
	initial out = 10'b0000000000;
	
	assign linear_feedback = out[9]^out[5];
	
	always_ff @(posedge clk) 
	
		if (reset)
		
			out <= 10'b0000000000;
		
		else 
			out <= out << 1;
			out[0] <= linear_feedback;
	
endmodule 


module LFSR_testbench();

	logic clk, reset;
	logic [9:0] out;
	
	LFSR RC (.clk,.reset,.out);
	
	parameter CLOCK_PERIOD = 100;
	
	initial clk = 1;
	
	always begin 
	
		#(CLOCK_PERIOD/2)
		clk = ~clk;
		
	end 
	
	initial begin	
									@(posedge clk);
		reset <= 1;					@(posedge clk);
		reset <= 0; 				@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
								
		$stop;
	end
	
endmodule
